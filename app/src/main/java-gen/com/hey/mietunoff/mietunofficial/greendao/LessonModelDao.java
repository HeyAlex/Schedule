package com.hey.mietunoff.mietunofficial.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LESSON_MODEL".
*/
public class LessonModelDao extends AbstractDao<LessonModel, Void> {

    public static final String TABLENAME = "LESSON_MODEL";

    /**
     * Properties of entity LessonModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Week = new Property(0, Integer.class, "week", false, "WEEK");
        public final static Property Day = new Property(1, Integer.class, "day", false, "DAY");
        public final static Property Room = new Property(2, String.class, "room", false, "ROOM");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property TimeFrom = new Property(4, String.class, "timeFrom", false, "TIME_FROM");
        public final static Property TimeTo = new Property(5, String.class, "timeTo", false, "TIME_TO");
        public final static Property GroupName = new Property(6, String.class, "groupName", false, "GROUP_NAME");
    }

    private Query<LessonModel> scheduleModel_LessonsQuery;

    public LessonModelDao(DaoConfig config) {
        super(config);
    }
    
    public LessonModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LESSON_MODEL\" (" + //
                "\"WEEK\" INTEGER," + // 0: week
                "\"DAY\" INTEGER," + // 1: day
                "\"ROOM\" TEXT," + // 2: room
                "\"TIME\" TEXT," + // 3: time
                "\"TIME_FROM\" TEXT," + // 4: timeFrom
                "\"TIME_TO\" TEXT," + // 5: timeTo
                "\"GROUP_NAME\" TEXT NOT NULL );"); // 6: groupName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LESSON_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LessonModel entity) {
        stmt.clearBindings();
 
        Integer week = entity.getWeek();
        if (week != null) {
            stmt.bindLong(1, week);
        }
 
        Integer day = entity.getDay();
        if (day != null) {
            stmt.bindLong(2, day);
        }
 
        String room = entity.getRoom();
        if (room != null) {
            stmt.bindString(3, room);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String timeFrom = entity.getTimeFrom();
        if (timeFrom != null) {
            stmt.bindString(5, timeFrom);
        }
 
        String timeTo = entity.getTimeTo();
        if (timeTo != null) {
            stmt.bindString(6, timeTo);
        }
        stmt.bindString(7, entity.getGroupName());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LessonModel entity) {
        stmt.clearBindings();
 
        Integer week = entity.getWeek();
        if (week != null) {
            stmt.bindLong(1, week);
        }
 
        Integer day = entity.getDay();
        if (day != null) {
            stmt.bindLong(2, day);
        }
 
        String room = entity.getRoom();
        if (room != null) {
            stmt.bindString(3, room);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String timeFrom = entity.getTimeFrom();
        if (timeFrom != null) {
            stmt.bindString(5, timeFrom);
        }
 
        String timeTo = entity.getTimeTo();
        if (timeTo != null) {
            stmt.bindString(6, timeTo);
        }
        stmt.bindString(7, entity.getGroupName());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LessonModel readEntity(Cursor cursor, int offset) {
        LessonModel entity = new LessonModel( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // week
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // day
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // room
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // timeFrom
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // timeTo
            cursor.getString(offset + 6) // groupName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LessonModel entity, int offset) {
        entity.setWeek(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setDay(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRoom(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeFrom(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimeTo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroupName(cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LessonModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LessonModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(LessonModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "lessons" to-many relationship of ScheduleModel. */
    public List<LessonModel> _queryScheduleModel_Lessons(String groupName) {
        synchronized (this) {
            if (scheduleModel_LessonsQuery == null) {
                QueryBuilder<LessonModel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GroupName.eq(null));
                scheduleModel_LessonsQuery = queryBuilder.build();
            }
        }
        Query<LessonModel> query = scheduleModel_LessonsQuery.forCurrentThread();
        query.setParameter(0, groupName);
        return query.list();
    }

}
