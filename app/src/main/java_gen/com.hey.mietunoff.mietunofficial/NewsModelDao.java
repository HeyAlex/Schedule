package com.hey.mietunoff.mietunofficial;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "NEWS_MODEL".
 */
public class NewsModelDao extends AbstractDao<NewsModel, Void> {

    public static final String TABLENAME = "NEWS_MODEL";

    public NewsModelDao(DaoConfig config) {
        super(config);
    }


    public NewsModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_MODEL\" (" + //
                "\"TITLE\" TEXT," + // 0: title
                "\"LINK\" TEXT," + // 1: link
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"IMAGE_URL\" TEXT," + // 3: imageUrl
                "\"DATE\" TEXT);"); // 4: date
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsModel entity) {
        stmt.clearBindings();

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }

        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(2, link);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }

        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }

        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsModel entity) {
        stmt.clearBindings();

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }

        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(2, link);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }

        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }

        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    @Override
    public NewsModel readEntity(Cursor cursor, int offset) {
        NewsModel entity = new NewsModel( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // link
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageUrl
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // date
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, NewsModel entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLink(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImageUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    @Override
    protected final Void updateKeyAfterInsert(NewsModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    @Override
    public Void getKey(NewsModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(NewsModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity NewsModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property Link = new Property(1, String.class, "link", false, "LINK");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property ImageUrl = new Property(3, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
    }

}
