package com.hey.mietunoff.mietunofficial;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SCHEDULE_MODEL".
 */
public class ScheduleModelDao extends AbstractDao<ScheduleModel, String> {

    public static final String TABLENAME = "SCHEDULE_MODEL";
    private DaoSession daoSession;

    public ScheduleModelDao(DaoConfig config) {
        super(config);
    }


    public ScheduleModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHEDULE_MODEL\" (" + //
                "\"GROUP\" TEXT PRIMARY KEY NOT NULL ," + // 0: group
                "\"SEMESTR\" TEXT);"); // 1: semestr
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHEDULE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScheduleModel entity) {
        stmt.clearBindings();

        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(1, group);
        }

        String semestr = entity.getSemestr();
        if (semestr != null) {
            stmt.bindString(2, semestr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScheduleModel entity) {
        stmt.clearBindings();

        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(1, group);
        }

        String semestr = entity.getSemestr();
        if (semestr != null) {
            stmt.bindString(2, semestr);
        }
    }

    @Override
    protected final void attachEntity(ScheduleModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    @Override
    public ScheduleModel readEntity(Cursor cursor, int offset) {
        ScheduleModel entity = new ScheduleModel( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // group
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // semestr
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, ScheduleModel entity, int offset) {
        entity.setGroup(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSemestr(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    }

    @Override
    protected final String updateKeyAfterInsert(ScheduleModel entity, long rowId) {
        return entity.getGroup();
    }

    @Override
    public String getKey(ScheduleModel entity) {
        if (entity != null) {
            return entity.getGroup();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScheduleModel entity) {
        return entity.getGroup() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity ScheduleModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Group = new Property(0, String.class, "group", true, "GROUP");
        public final static Property Semestr = new Property(1, String.class, "semestr", false, "SEMESTR");
    }

}
