package com.alex.miet.mobile;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LESSON_MODEL".
 */
public class LessonModelDao extends AbstractDao<LessonModel, Long> {

    public static final String TABLENAME = "LESSON_MODEL";
    private Query<LessonModel> scheduleModel_LessonsQuery;

    public LessonModelDao(DaoConfig config) {
        super(config);
    }

    public LessonModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"LESSON_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WEEK\" INTEGER," + // 1: week
                "\"DAY\" INTEGER," + // 2: day
                "\"ROOM\" TEXT," + // 3: room
                "\"TIME\" INTEGER," + // 4: time
                "\"TIME_FULL\" TEXT," + // 5: timeFull
                "\"TIME_FROM\" TEXT," + // 6: timeFrom
                "\"TIME_TO\" TEXT," + // 7: timeTo
                "\"TEACHER\" TEXT," + // 8: teacher
                "\"TEACHER_FULL\" TEXT," + // 9: teacherFull
                "\"DISCIPLINE_NAME\" TEXT," + // 10: disciplineName
                "\"DISCIPLINE_TYPE\" TEXT," + // 11: disciplineType
                "\"CODE\" TEXT," + // 12: code
                "\"GROUP_NAME\" TEXT NOT NULL );"); // 13: groupName
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LESSON_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LessonModel entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer week = entity.getWeek();
        if (week != null) {
            stmt.bindLong(2, week);
        }

        Integer day = entity.getDay();
        if (day != null) {
            stmt.bindLong(3, day);
        }

        String room = entity.getRoom();
        if (room != null) {
            stmt.bindString(4, room);
        }

        Integer time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time);
        }

        String timeFull = entity.getTimeFull();
        if (timeFull != null) {
            stmt.bindString(6, timeFull);
        }

        String timeFrom = entity.getTimeFrom();
        if (timeFrom != null) {
            stmt.bindString(7, timeFrom);
        }

        String timeTo = entity.getTimeTo();
        if (timeTo != null) {
            stmt.bindString(8, timeTo);
        }

        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(9, teacher);
        }

        String teacherFull = entity.getTeacherFull();
        if (teacherFull != null) {
            stmt.bindString(10, teacherFull);
        }

        String disciplineName = entity.getDisciplineName();
        if (disciplineName != null) {
            stmt.bindString(11, disciplineName);
        }

        String disciplineType = entity.getDisciplineType();
        if (disciplineType != null) {
            stmt.bindString(12, disciplineType);
        }

        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(13, code);
        }
        stmt.bindString(14, entity.getGroupName());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LessonModel entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer week = entity.getWeek();
        if (week != null) {
            stmt.bindLong(2, week);
        }

        Integer day = entity.getDay();
        if (day != null) {
            stmt.bindLong(3, day);
        }

        String room = entity.getRoom();
        if (room != null) {
            stmt.bindString(4, room);
        }

        Integer time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time);
        }

        String timeFull = entity.getTimeFull();
        if (timeFull != null) {
            stmt.bindString(6, timeFull);
        }

        String timeFrom = entity.getTimeFrom();
        if (timeFrom != null) {
            stmt.bindString(7, timeFrom);
        }

        String timeTo = entity.getTimeTo();
        if (timeTo != null) {
            stmt.bindString(8, timeTo);
        }

        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(9, teacher);
        }

        String teacherFull = entity.getTeacherFull();
        if (teacherFull != null) {
            stmt.bindString(10, teacherFull);
        }

        String disciplineName = entity.getDisciplineName();
        if (disciplineName != null) {
            stmt.bindString(11, disciplineName);
        }

        String disciplineType = entity.getDisciplineType();
        if (disciplineType != null) {
            stmt.bindString(12, disciplineType);
        }

        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(13, code);
        }
        stmt.bindString(14, entity.getGroupName());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public LessonModel readEntity(Cursor cursor, int offset) {
        LessonModel entity = new LessonModel( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // week
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // day
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // room
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // time
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // timeFull
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // timeFrom
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // timeTo
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // teacher
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // teacherFull
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // disciplineName
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // disciplineType
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // code
                cursor.getString(offset + 13) // groupName
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, LessonModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWeek(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDay(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRoom(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTimeFull(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimeFrom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimeTo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTeacher(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTeacherFull(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDisciplineName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDisciplineType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGroupName(cursor.getString(offset + 13));
    }

    @Override
    protected final Long updateKeyAfterInsert(LessonModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(LessonModel entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LessonModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "lessons" to-many relationship of ScheduleModel.
     */
    public List<LessonModel> _queryScheduleModel_Lessons(String groupName) {
        synchronized (this) {
            if (scheduleModel_LessonsQuery == null) {
                QueryBuilder<LessonModel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GroupName.eq(null));
                scheduleModel_LessonsQuery = queryBuilder.build();
            }
        }
        Query<LessonModel> query = scheduleModel_LessonsQuery.forCurrentThread();
        query.setParameter(0, groupName);
        return query.list();
    }

    /**
     * Properties of entity LessonModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Week = new Property(1, Integer.class, "week", false, "WEEK");
        public final static Property Day = new Property(2, Integer.class, "day", false, "DAY");
        public final static Property Room = new Property(3, String.class, "room", false, "ROOM");
        public final static Property Time = new Property(4, Integer.class, "time", false, "TIME");
        public final static Property TimeFull = new Property(5, String.class, "timeFull", false, "TIME_FULL");
        public final static Property TimeFrom = new Property(6, String.class, "timeFrom", false, "TIME_FROM");
        public final static Property TimeTo = new Property(7, String.class, "timeTo", false, "TIME_TO");
        public final static Property Teacher = new Property(8, String.class, "teacher", false, "TEACHER");
        public final static Property TeacherFull = new Property(9, String.class, "teacherFull", false, "TEACHER_FULL");
        public final static Property DisciplineName = new Property(10, String.class, "disciplineName", false, "DISCIPLINE_NAME");
        public final static Property DisciplineType = new Property(11, String.class, "disciplineType", false, "DISCIPLINE_TYPE");
        public final static Property Code = new Property(12, String.class, "code", false, "CODE");
        public final static Property GroupName = new Property(13, String.class, "groupName", false, "GROUP_NAME");
    }

}
